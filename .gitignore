// include touchscreen digitizer and neopixel libraries. With touchscreen it is 
// possible to read position with x and y values, and pressure with z value. For 
// pressure value z, large value = small pressure while small value = large pressure.

#include <stdint.h>
#include "TouchScreen.h"
#include <Adafruit_NeoPixel.h>

#define EXIT_THRESHOLD 15

#define YP A1
#define XM A0
#define YM 6 
#define XP 7   

#define YP2 A4 
#define XM2 A3 
#define YM2 3  
#define XP2 4   

#define PIN    12  // digital pin of neopixel #1
#define PIN2   13  // digital pin of neopixel #2
#define N_LEDS   15  // the number of pixels being used

// For better pressure precision, we need to know the resistance
// between X+ and X- Use any multimeter to read it.
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300);  //X+, Y+, X-, Y-, resistance between X+ & X-
TouchScreen ts2 = TouchScreen(XP2, YP2, XM2, YM2, 300);

TSPoint p;
TSPoint p2;
int x_max; // max x value of ts.1
int x2_max; // man x value of ts.2
int Y; // Y value of ts.1
int Y2; // Y value of ts.2
int gap = 150;
int u = 50;  // pixels on ts of 0.5 hour

Adafruit_NeoPixel strip = Adafruit_NeoPixel(N_LEDS, PIN, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel strip2 = Adafruit_NeoPixel(N_LEDS, PIN2, NEO_GRB + NEO_KHZ800);

int Index; // Number of indicated pixel of strip1
int n; // varable for calculating Index and index
int m;// moduloW
int new_index;
int new_n;
int new_m;

uint32_t Color;
uint32_t color1; // save colors of strip 1
uint32_t color2; // save colors of strip 2
uint32_t color; // save color for moving
uint32_t start_color;
uint32_t Index_color;

//  set 4 colors for 4 objects.
uint32_t blue = strip.Color(20, 96, 255);
uint32_t green = strip.Color(30, 255, 30);
uint32_t red = strip.Color(255, 30, 0);
uint32_t yellow = strip.Color(255, 255, 0);

// define ranges of Z values for separate color bars 
int y1 = 400;
int y2 = 500;
int y3 = 600;

int i = 0;  // varable for loop
int count = 0; // count pixelsselected to move

// varables being used for correcting pressure readings.
int counter = 0;
boolean c_flag = false;
int j = 0;  // varable for timing
int j_2 = 0;
unsigned long time;
unsigned long grid = 150000; // 2.5min; 300000 = 5 min; 900000 = 15 min; 1800000 = 30 min;

void setup(void) {
  strip.begin();
  strip.show();
  strip2.begin();
  strip2.show();
  Serial.begin(9600);
  start();
}

void loop(void){
// timer
  time = millis();
//  Serial.println(time);
  unsigned long M = time % grid;
  int M_M = (time /grid) % 2;
  Serial.print("M = "); Serial.println(M);
//  Serial.print("grid = ");Serial.println(grid);
  if (((M_M == 0 && M > (grid - 50))||(M_M != 0 && M < 50))){
    strip.setPixelColor(j,0,0,0);
    j++;
    strip.show();
    Serial.println("follow1");
  }
  if (time > grid && ((M_M == 0 && M < 50)||(M_M != 0 && M > (grid - 50)))){
    strip2.setPixelColor(j_2,0,0,0);
    j_2++;
    strip2.show();
    Serial.println("follow2");
  }
  
  //assign the latest pixel colors to start color
  change_start();
  //  a point object holds x y and z coordinates
  p = ts.getPoint();
  p2 = ts2.getPoint();
  //  set a certain pixel a certain color according to x and y values.
  x_max = 820;
  x2_max = 960;
  Y = p.y;
  Y2 = p2.y;
  delay(50);

  if ((p.x < x_max && p.x > 0 && p.y < 700 && p.y > 300 && p.z > ts.pressureThreshhold)||
     (p2.x < x2_max && p2.x > 0 && p2.y < 700 && p2.y > 300 && p2.z > ts.pressureThreshhold)){
    Serial.println("START");
    Serial.print("x = ");Serial.println(p.x);
    oldN();
    m = n % 2;
    position_color();
    Serial.print("COLOR = "); Serial.println(Color);
    
    // get to know the pixel and its start color of the 1st touch
    if (m == 0){
      Index = n / 2;
      start_color = strip.getPixelColor(Index);
      Index_color = strip.getPixelColor(Index);
    }
    else {
      Index = (n-1) / 2;
      start_color = strip2.getPixelColor(Index);
      Index_color = strip2.getPixelColor(Index);
    }

    // check start color and color according to touch, to decide which action to take
    while (Color == start_color){
      Serial.println("WHILE");
      delay(50);
      p = ts.getPoint();
      p2 = ts2.getPoint();

      // while pressing, take actions
      if (p.x > 0 || p2.x > 0){
        newN();
        new_m = new_n % 2;
        uint16_t new_Y = p.y;
        uint16_t new_Y2 = p2.y;
        // check if new_n is even number or odd number
        // get start color of the next pixel according to new_n
        uint32_t next_color;
        if (new_m == 0){
          new_index = new_n / 2;
          next_color = strip.getPixelColor(new_index);
        }
        else {
          new_index = (new_n - 1) / 2;
          next_color = strip2.getPixelColor(new_index);
        }

        // erase
        if ((new_n < n) && (Index_color == Color))
          erase();

        // lengthen
        if ((new_n > n) && (next_color != Color))
          insert();

        // move(select)
        if ((new_n > n) && (next_color == Color))
          select();
        // move(move)
        else if ((new_n != n) && ((new_Y >= Y + gap/2 || new_Y <= Y - gap/2)||
                 (new_Y2 >= Y2 + gap/2 || new_Y2 <= Y2 - gap/2)))  // if Y value changes
          to_move();

        delay(50);
      }
      else {
        Color = 50;
        Serial.println("END1");
      }
      strip.show();
      strip2.show();
    }

    // insert
    if (Color != start_color){
      Serial.println("INSERT");
      p = ts.getPoint();
      p2 = ts2.getPoint();
      if (p.x > 0 || p2.x > 0){
        new_n = n;
        insert();
      }
      else {
        Color = 50;
        Serial.println("END2");
      }
      strip.show();
      strip2.show();
    }
    correct();
  }
  delay(50);
}

// ALL functions used in loop
void erase(){
  Serial.println("erase");
  n = new_n;
  m = n % 2;
//  Serial.print("m = ");Serial.println(m);
  if (m == 0){
    Index = n / 2;
    //    Serial.print("Index = ");Serial.println(Index);
    // erase 01
    for (i = Index + 1; i < N_LEDS; i++){
      color1 = strip.getPixelColor(i);
      color2 = strip2.getPixelColor(i);
      strip.setPixelColor(i, color2);
      strip2.setPixelColor(i - 1, color1);
    }
    Index_color = strip.getPixelColor(Index);
  }
  else {
    Index = (n - 1) / 2;
//    Serial.print("Index = ");Serial.println(Index);
    // erase 02
    for (i = Index + 1; i < N_LEDS; i++){
      color1 = strip.getPixelColor(i+1);
      color2 = strip2.getPixelColor(i);
      strip.setPixelColor(i, color2);
      strip2.setPixelColor(i, color1);
    }
    Index_color = strip2.getPixelColor(Index);
  }
}

void insert(){
  Serial.println("insert");
  n = new_n;
  m = n % 2;
  if (m == 0){
    Index = n / 2;
    // insert 01
    for (i = N_LEDS - 1; i > Index; i--){
      color1 = strip.getPixelColor(i - 1);
      color2 = strip2.getPixelColor(i - 1);
//      Serial.println("getColor");
      strip.setPixelColor(i, color2);
      strip2.setPixelColor(i - 1, color1);
//      Serial.print("i = ");Serial.println(i);
    }
    strip.setPixelColor(Index, Color);
  }
  else {
    Index = (n - 1) / 2;
    // insert 02
    for (i = N_LEDS - 1; i > Index; i--){
      color1 = strip.getPixelColor(i);
      color2 = strip.getPixelColor(i - 1);
      strip.setPixelColor(i, color2);
      strip2.setPixelColor(i, color1);
    }
    strip2.setPixelColor(Index, Color);
  }
}

void select(){
  n = new_n;
  count++;
  delay(50);
  Serial.println("select");
}

void to_move(){  // if Y value changes
  Serial.println("move");
  p = ts.getPoint(); // X value changes again
  p2 = ts2.getPoint();
  newN();

  // move downwards
  if (new_n > n){
    n = new_n; // the last pixel moved
    m = n % 2;
    // moved color changes
    if (m == 0){
      Index = n / 2;
      color = strip.getPixelColor(Index);
      strip.setPixelColor(Index, Color);
    }
    else {
      Index = (n - 1) / 2;
      color = strip2.getPixelColor(Index);
      strip2.setPixelColor(Index, Color);
    }
//    Serial.print("Index = ");Serial.println(Index);
//    Serial.print("color = ");Serial.println(color);
    // following color change
    if ((n - count) % 2 == 0){
      i = (n - count)/ 2 - 1;
      strip2.setPixelColor(i, color);
    }
    else {
      i = (n - count - 1) / 2;
      strip.setPixelColor(i, color);
    }
  }

  // move upwards
  else if (new_n < n){
    //    Serial.print("n = "); Serial.println(new_n);
    n = new_n; // the last pixel moved
    m = n % 2;
    // moved color changed
    if ((n - count) % 2 == 0){
      i = (n - count) / 2;
      color = strip.getPixelColor(i);
      strip.setPixelColor(i, Color);
    }
    else {
      i = (n - count - 1)/2;
      color = strip.getPixelColor(i);
      strip2.setPixelColor(i, Color);
      Serial.println("strip2");
    }
    // following color change
    if (m == 0){
      Index = n / 2;
      strip2.setPixelColor(Index, color);
    }
    else {
      Index = (n - 1) / 2;
      strip.setPixelColor(Index + 1, color);
      Serial.println("strip1");
    }
//    Serial.print("color = ");Serial.println(color);
//    Serial.print("Index = ");Serial.println(Index);
  }
}

void start(){
  for (i = 0; i < 30 ; i++){
    if (i == 0 || i == 4 || i == 9)
      Color = blue;
    if ((i > 0 && i < 4)||(i > 5 && i < 8)||(i > 9 && i < 14))
      Color = green;
    if ((i == 5)||(i >= 14))
      Color = yellow;
    strip.setPixelColor(i, Color);
  }
  for (i = 0; i < 30 ; i++){
    if (i == 0)
      Color = red;
    if ((i > 0 && i < 4)||(i > 5 && i < 8)||(i > 9 && i < 13))
      Color = green;
    if ((i == 5)||(i >= 13))
      Color = yellow;
    if (i == 9)
      Color = blue;
    strip2.setPixelColor(i, Color);
  }  
  strip.show();
  strip2.show();
}

void position_color(){
  Serial.println("POSITION");
  int y = 0;
  int r = 0;
  int b = 0;
  int g = 0;
  int total = 0;
  float bili;
  while(true){
    delay(50);
    p = ts.getPoint();
    p2 = ts2.getPoint();
    if ((p.y < 700 && p.y > 300 && p.z > ts.pressureThreshhold)||
        (p2.z < 700 && p2.y > 300 && p2.z > ts.pressureThreshhold)){
      c_flag = true;
      for(i = 0; i < 10; i++){
        p = ts.getPoint();
        p2 = ts2.getPoint();
//        Serial.print("Pressure = ");Serial.println(p.z);
        if (c_flag){
          if (p.z > y3 || p2.z > y3)
            b++;
          if ((p.z <= y3 && p.z > y2)||(p2.z <= y3 && p2.z > y2))
            y++;
          if ((p.z < y2 && p.z > y1)||(p2.z < y2 && p2.z > y1))
            r++;
          if ((p.z <= y1 && p.z > ts.pressureThreshhold)||(p2.z <= y1 && p2.z > ts.pressureThreshhold))
            g++;
          if (p.z != 0 || p2.z != 0)
          total++;
        }
      }
      bili = total * 0.50;
      if(c_flag){
        if (g >= bili)
        Color = green;
      if(r >= bili)
        Color = red;
      if(y >= bili)
        Color = yellow;  
      if(b >= bili)
        Color = blue;
      break;
      }
    }
  }
}

void change_start(){
  for (i = 0; i < N_LEDS; i++){
    uint32_t change_color = strip.getPixelColor(i);
    uint32_t change_color2 = strip2.getPixelColor(i);
    strip.setPixelColor(i, change_color);
    strip2.setPixelColor(i, change_color2);
  }
  strip.show();
  strip2.show();
}

// correct pressure values by loop to ensure "one touch at one point" creates one
// pixel change, lease of touch and change of position trigggers another action. 
void correct(){
  counter = 0;
  while(true){
    delay(50);
    p = ts.getPoint();
    p2 = ts2.getPoint();
    Serial.println(p.z);
    if (p.z == 0 || p2.z == 0){
      c_flag = true;
      for(i = 0; i < 10; i++){
        p = ts.getPoint();
        p2 = ts2.getPoint();
        newN();
        if ((p.z == 0 || p2.z == 0) && c_flag)
          counter++;
        else{
          counter = 0;
          c_flag = false;
        }
      }
      // if more than 15(EXIT_THRESHOLD) pressure readings = 0, 
      // (which indicates that "one touch" ends,)or position of touching has been 
      // changed, jump out from while loop and starts a new main loop from beginning.
      if((c_flag && counter > EXIT_THRESHOLD) || new_n != n)
        break;
    }  
  }
}

void oldN(){
  if (p.x != 0)
    n = (x_max - p.x) / u;
  else if (p2.x != 0)
    n = ((x2_max - p2.x) / u) + 16;
  Serial.print("n = ");Serial.println(n);
}

void newN(){
  if (p.x != 0)
    new_n = (x_max - p.x) / u;
  else if (p2.x != 0)
    new_n = ((x2_max - p2.x) / u) + 16;
  Serial.print("new_n = ");Serial.println(new_n);
}
